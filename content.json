{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/10/13/hello-world/"},{"title":"GC 模型","text":"go GC模型https://www.processon.com/view/60fbe47a637689719d24c16b?fromnew=1 什么是GC现代高级编程语言管理内存的方式分为两种：自动和手动，像C、C++ 等编程语言使用手动管理内存的方式，工程师编写代码过程中需要主动申请或者释放内存；而 PHP、Java 和 Go 等语言使用自动的内存管理系统，有内存分配器和垃圾收集器来代为分配和回收内存，其中垃圾收集器就是我们常说的GC。 GC 回收的是什么？在应用程序中会使用到两种内存，分别为堆和栈。GC负责回收堆内存，而不负责回收栈中的内存。那么这是为什么呢？ 主要原因是栈是一块专用内存，专门为了函数执行而准备的，存储着函数中的局部变量以及调用栈。除此以外，栈中的数据都有一个特点——简单。比如局部变量不能被函数外访问，所以这块内存用完就可以直接释放。正是因为这个特点，栈中的数据可以通过简单的编译器指令自动清理，并不需要通过 GC 来回收。 GC算法的种类主流的垃圾回收算法有两大类，分别是追踪式垃圾回收算法和引用计数算法。而Go语言现在用的三色标记法就属于追踪式垃圾回收算法的一种。 GC 相关概念STW - 暂停应用程序 mutator - 垃圾收集场景下的应用程序 什么是垃圾垃圾检测通常通过建立一些根对象集合以及建立一个从这些根对象开始能够触及的对象集合来实现。如果正在执行的程序可以访问到根对象和某个对象之间存在引用路径，这个对象就是可触及的。对于程序来说，根对象总是可以访问的。从这些根对象开始，任何可以被触及的对象都被认为是“活动”的对象，无法被触及的对象被认为是垃圾。 如何识别垃圾常见的垃圾回收策略分为两种：一种是直接回收，即引用计数；另一种是间接回收，即追踪式回收（可达性分析）。 个人简单理解为：一个把这种消耗平摊在应用的日常运行中，一个攒着处理。 两种方法其实都只关心引用类型，像int、string 等基本类型不需要关心，因为它们在栈内存，而GC回收的是堆内存。 引用计数算法 定义为堆中的每个对象引入一个计数器，记录下这个对象被引用次数，通过这个计数来区分活动对象和垃圾对象 实现给对象添加一个引用计数器，每当一个地方引用它时，数据器加1，当引用失效时，计数器减1，计数器为0的即可被回收 由此可以知晓引用计数需要占据额外的存储空间，如果本身的内存单元较小则，计数器占用的空间就会变得明显 引用计数的内存释放等于把这个开销平摊到应用的日常运行中，因为在计数为0的那一刻，就是释放的内存的时刻，这其实对于内存敏感的场景很适用 优点实现简单，判断效率高并且内存清理及时 注：其实极端情况下引用计数也不会那么及时，假如现在有一个对象引用了另一个对象，而另一个对象又引用了另一个，依次引用下去，那么当第一个对象要被回收的时候，就会引发连锁回收反应，对象很多的话这个延时就凸显出来了 缺点很难解决对象之间的相互循环引用（objA.instance = objB; objB.instance = objA）的问题。 Python是如何解决循环引用的问题呢 Python使用双向链表来链接容器对象，当一个容器对象被创建时，他被插入到这个链表中，当它被删除时则移除，每个容器对象上还有一个gc_refs字段 示例中A和B对象循环引用，C对象引用了D对象，最终循环引用的A和B都能被清理 对每个容器对象，将 gc_refs 设置为该对象的引用计数。 对每个容器对象，查找它所引用的容器对象，并减少找到的被引用的容器对象的 gc_refs 字段。 将此时 gcrefs 大于 0 的容器对象移动到不同的集合中，因为 gcrefs 大于 0 说明有对象外部引用它，因此不能释放这些对象。 然后找出 gc_refs 大于 0 的容器对象所引用的对象，它们也不能被清除。 最后剩下的对象说明仅由该链表中的对象引用，没有外部引用，所以是垃圾可以清除。 小结Python 没有解决引用计数的循环引用问题，只是结合了非传统的标记-清除方案来兜底，算是曲线救国。说其非传统是因为标记是采取的是找不可达的对象，而不是可达的对象。 追踪式回收算法（可达性分析） 可达性分析是现代垃圾回收的核心选择，但是由于需要统一回收比较耗时，容易影响应用的正常运行。 定义追踪从根节点开始的引用图。以某种方式为追踪中遇上的对象打上标记，当追踪结束时，没有被打上标记的对象就被判定是不可触及的，可以被当作垃圾收集。 其实就是一个标记的过程，标记可达对象，清除不可达对象。 注：垃圾收集的根对象一般包括全局变量和栈对象等。 实现Java 和 C# 都是使用可达性分析来判断对象是否存活。通过一系列的名为“GC Root”的对象作为起始点，从这些节点开始向下搜索，搜索所有走过的路径称为引用链（Reference Chain）,当一个对象到“GC Root”没有任何引用链相连时（用图论来说就是“GC Root”到这个对象不可达时），证明该对象是可以被回收的。 JVM如何判断栈上的数据是什么类型GC只需要关注引用类型，因此它需要知道栈上、寄存器等哪个位置是引用 保守式GC 保守式 GC 指的是 JVM 不会记录数据的类型，也就是无法区分内存上的某个位置的数据到底是引用类型还是非引用类型。 因为只能靠一些条件来猜测是否有指针指向，如果不能确定这是指针，只能保守认为就是指针。因此保守式 GC 会有放过一些“垃圾”，对内存不太友好。 因为疑似指针的情况，导致我们无法确认它是否是真的指针，所以也就无法移动对象，因为移动对象就需要改指针，因此保守式 GC 只能使用标记-清除这种不移动对象的算法。注：有一个方法就是加个中间层，也就是句柄层，引用会先指到句柄，然后再从句柄表找到实际对象，因此直接引用不需要改变，如果要移动对象只需要修改句柄表即可。不过这样访问就多了一层，效率就变低了。 半保守式GC 半保守式GC，在对象上会记录类型信息而其他地方还是没有记录，因此从根扫描的话还是一样，得靠猜测。 半保守式 GC 只有根直接扫描的对象无法移动，从直接对象再追溯出去的对象可以移动，所以半保守式 GC 可以使用移动部分对象的算法，也可以使用标记-清除这种不移动对象的算法。 准确式GC 需要清晰的知晓对象的类型，包括在栈上的引用也能得知类型等。 思路：可以在指针上打标记，来表明类型，或者在外部记录类型信息形成一张映射表。HotSpot 用的就是映射表，这个表叫 OopMap。它记录了执行到栈上和寄存器里哪些位置是引用。注：针对方法，会在安全点生成 OopMap， 扩展阅读：什么是安全点、安全区? https://pianshen.com/article/87582077389/ 如何清理垃圾标记-清除算法 定义它将垃圾收集分为两个阶段 标记阶段：标记出可达的活跃对象。 清除阶段：回收不可达的垃圾对象所占用的空间。 优缺点 优点 实现简单 缺点 标记和清除的效率不高； 容易产生大量不连续的内存碎片，碎片太多可能会导致后续没有足够的连续内存分配给较大的对象，从而提前触发新的一次垃圾收集动作。 优化策略 位图标记法 将堆中的内存可以分成一块一块，而对象就是在一块，或者多块内存上。 堆内存某个块用一个位来标记，根据对象所在的地址和堆的起始地址就可以算出对象是在第几块上，然后将一个位图中的第几位置为 1 ，表明这块地址上的对象被标记了。 位图标记法不仅可以利用写时复制，清除也更加高效，如果标记在对象头上，那么需要遍历整个堆来扫描对象，现在有了位图，可以快速遍历清除对象。 多个空闲链表 遍历链表查找合适的内存块，会比较耗时。根据内存分块大小组成不同的链表，比如分为大分块链表和小分块链表，这样根据申请的内存分块大小遍历不同的链表，加快申请的效率。 标记-复制算法 复制算法的效率与存活对象的数目多少有很大的关系，如果存活对象很少，复制算法的效率就会很高。 定义他把内存空间划分为两个相等的区域，每次只使用其中一个一个区域，在垃圾收集时，遍历当前使用的区域，把存活对象复制到另一个区域中，最后将当前使用的区域的可回收的对象进行回收 实现 首先这个算法会把堆分为两块，一块是from、一块是To 对象只会在from上生成，发生GC之后会找到所有存活对象，然后将其复制到to区，之后整体回收from区。 再将to区和from区身份对调，即to变成from，from变成to 优缺点 直接移动指针分配内存，效率很高，对于CPU缓存亲和性高（因为从根开始遍历一个节点，是深度优先遍历，把关联的对象都找到，然后内存分配在相近的地方） 每次都对整个半区进行内存回收，不需要考虑内存碎片的问题 缺点代价就是使用内存为原来的一半 标记-压缩算法（标记-整理算法） 定义在标记可回收的对象后将所有存活的对象压缩到内存的一端，使它们紧凑地排列在一起，然后对边界以外的内存进行回收，回收后，已用和未用的内存都各自一边。 优缺点优点将存活的对象往边界整理，也没有内存碎片，不会想标记复制算法浪费一半内存，内存利用率较高。 缺点需要对堆进行多次搜索，花费时间较长（毕竟是在一个空间内又标记，又移动的，所以整体而言花费的时间较多，而且如果堆很大的情况，那么消耗的时间将更加突出）。 进一步优化方向有哪些可达性分析的研究方向就是往如何减少对应用程序运行的影响即减少 STW(stop the world) 的时间。 根据对象分代假说研究出了分代收集，根据对象的特性划分了新生代和老年代，采取不同的收集算法，提升回收的效率。 想方设法的拆解 GC 的步骤使得可以与应用线程并发，并且采取并行收集，加快收集速度。 分代收集应该对不同的生命周期的对象采取不同的收集策略，根据生命周期长短将它们放到不同的区域，并在不同的区域采用不同的收集算法，这就是分代的概念，分代收集算法会结合不同的收集算法来处理不同的空间 JVM GC现在主流的jvm垃圾收集器都采用分代收集算法 堆区划分 Java堆区基于分代的概念，分为新生代和老年代。 新生代再细分为Eden空间、From Survivor空间和To Survivor空间。因为Eden空间中的大多数生命周期很短，所以新生代的空间划分并不是均分的，HotSpot虚拟机默认Eden:From Survivor:To Survivor空间的所占的比例为8:1:1。 新生代垃圾收集（minor colletion） 由于新生代中绝大多数对象的生命周期很短，应用标记复制算法的效率就会很高。 当执行一次 Minor Collection 时，Eden 空间和 From Survivor 空间存活的对象会被复制到 To Survivor 空间。 有两种特殊情况，存活的对象不会复制到 To Survivor 空间，而是晋升到老年代。1.存活的对象的分代年龄超过-XX:MaxTenuringThreshold（用于控制对象经历多少次 Minor GC 才晋升到老年代）所指定的阈值。2.To Survivor 空间容量达到阈值。 当所有存活的对象被复制到 To Survivor 空间或晋升到老年代，Eden 空间和 From Survivor 空间都会被清空，新生代存活的对象都存放在 To Survivor 空间。接下来将 From Survivor 空间和 To Survivor 空间互换位置，每次 Survivor 空间互换都要保证 To Survivor 空间是空的，这就是复制算法在新生代中的应用。 老年代垃圾收集（Full Collection/Major Collection） Full Collection 通常情况下会伴随至少一次的 Minor Collection。 老年代收集频率较低，耗时较长。利用标记清除和标记压缩两者结合起来收集老年代，比如平日都用标记-清除，当察觉内存碎片实在太多了就用标记-整理来配合使用。 跨代引用问题跨代引用在回收新生代的时候，有可能有老年代的对象引用了新生代对象，所以老年代也需要作为根，但是如果扫描整个老年代的话效率就又降低了。因此，需要用记录集（Remembered Set）记录跨代之间的引用而避免扫描整体非收集区域。 记忆集记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。根据记录的精度分为 字长精度，每条记录精确到机器字长。 对象精度，每条记录精确到对象。 卡精度，每条记录精确到一块内存区域。最常见的是用卡精度来实现记忆集，称之为卡表。卡表的话占用内存比较少，但是相对字长、对象来说精度不准，需要扫描一片。所以也是一种取舍，到底要多大的卡。 卡表定义 卡的意思就是将内存空间分成很多卡片。假设新生代对象 A 被老年代 D 引用了，那么就需要记录老年代 D 所在的那一块内存片有引用新生代对象。因为卡的范围大，如果此时 D 旁边在同一个卡内的对象也有引用新生代对象的话，那么就只需要一条记录。 实现 一般会用字节数组来实现卡表，卡的范围也是设为 2 的 N 次幂大小。 卡表一般都是通过写屏障来维护的，会在对象引用字段赋值的时更新卡表。即：当引用字段赋值的时候判断下当前对象是老年代对象，所引用对象是新生代对象，于是就在老年代对象所对应的卡表位置置为 1，表示脏，待会需要加入根扫描。 回收新生代的时候，只需要扫描卡表，把标识为 1 的脏表所在内存块加入到 GC Roots 中扫描，这样就不需要扫描整个老年代了。 在堆内存比较大，且跨代引用较少的时候，还可以使用多卡表，提高扫描效率。 浮动垃圾现象不过这种将老年代作为根来扫描会有浮动垃圾的情况，因为老年代的对象可能已经成为垃圾，所以拿垃圾来作为根扫描出来的新生代对象也很有可能是垃圾。 增量式GC 思想将原本时间较长的暂停时间切分成多个更小的 GC 时间片。 实现增量式的垃圾收集需要使用三色标记算法 优缺点增量地标记和清除垃圾，虽然 GC 的时间跨度变大，但降低应用程序STW的最长时间；且引入写屏障也需要承担额外的计算开销。 并发式GC 思想将可以将能够并发执行的工作尽量并发执行，当然部分阶段还是需要暂停用户程序的。 实现通过开启读写屏障，利用多核优势，让 GC 与用户程序并行执行. 优缺点这样能够减少程序的最长暂停时间，还能减少 GC 的时间，但且引入读写屏障也需要承担额外的计算开销。 设计原理三色标记算法为了以缩短 STW 的时间，追踪式垃圾收集器都会实现三色标记算法的变种。因此首先要了解三色标记算法的工作原理。 注意：三色标记清除算法本身并不支持并发增量执行的，它仍然需要 STW，但是可以通过屏障等技术优化过程时期支持并发和增量执行。 标记过程 抽象出三色来表示 GC 中对象三种不同状况。白色：表示还未搜索的对象。灰色：表示正在搜索还未搜索完的对象。黑色：表示搜索完成的对象。 它标记过程有几个步骤： 初始时，所有对象都在白色集合中。0 从GC Roots出发扫描所有根对象，将它们引用的对象放入灰色集合中。 从灰色集合中获取对象，将本对象引用到的对象放入灰色集合中，将本对象放入黑色集合。 重复步骤3，直至灰色集合为空时，白色集合中的对象即为需要清理的对象。注：可以结合上图，来理解（图不太对，蓝色代表black ，黄色代表grey） 执行是为什么需要 STW如果标记时不 STW，用户程序可能在标记执行的过程中修改对象的指针，可能会造成漏标、多标情况。 漏标情况 - 不能接受1.第一个阶段搜索到 A 的子对象 B了，因此 A 被染成了黑色，B 为灰色。此时需要搜索 B。 2.但是在 B 开始搜索时，应用程序建立了从 A 对象到 D 对象的引用，由于 A 已经黑色了，所以不会再搜索到 D 了，所以 D 对象会被垃圾收集器错误地回收。 这种错误称为悬挂指针，即指针没有指向特定类型的合法对象；将还在使用的对象当成垃圾清除了，影响了内存的安全性， 多标情况 - 可以接受多标：比如 A 变成黑色之后，根引用被 mutator 删除了，那其实 A 就属于垃圾，但是已经被标记为黑色了，那就得等下次 GC 清除了。多标其实还能接受。 如何解决漏标情况？满足三色不变性想要在并发或者增量的标记算法中保证正确性，我们需要达成以下两种三色不变性（Tri-color invariant）中的任意一种： 强三色不变性 — 黑色对象不会指向白色对象，只会指向灰色对象或者黑色对象； 弱三色不变性 — 黑色对象指向的白色对象必须包含一条从灰色对象经由多个白色对象的可达路径 如何满足三色不变性？屏障技术定义 内存屏障技术是一种屏障指令，它可以让 CPU 或者编译器在执行内存相关操作时遵循特定的约束，该技术能够保证内存操作的顺序性，在内存屏障前执行的操作一定会先于内存屏障后执行的操作。 实现方式 垃圾收集中的屏障技术更像是一个钩子方法，它是在用户程序读取对象、创建新对象以及更新对象指针时执行的一段代码。 分类 根据操作类型的不同，我们可以将它们分成读屏障（Read barrier）和写屏障（Write barrier）两种。注：读屏障需要在读操作中加入代码片段，对用户程序的性能影响很大，所以编程语言往往都会采用写屏障保证三色不变性。 写屏障技术写屏障的实现需要编译器和运行时的共同协作。在 SSA 中间代码生成阶段，编译器会使用 cmd/compile/internal/ssa.writebarrier 在 Store、Move 和 Zero 操作中加入写屏障。 插入写屏障-满足强三色不变性 插入写屏障：在黑色引用白色对象时候，将白色对象置为灰色，这叫增量更新，以此满足强三色不变性。 插入写屏障的伪代码 1234writePointer(slot, ptr): shade(ptr) *slot = ptr 每当执行类似 *slot = ptr 的表达式时，我们会执行上述写屏障通过 shade 函数尝试改变指针的颜色。如果 ptr 指针是白色的，那么该函数会将该对象设置成灰色，其他情况则保持不变。 标记过程 1.垃圾收集器将根对象指向 A 对象标记成黑色并将 A 对象指向的对象 B 标记成灰色； 2.用户程序修改 A 对象的指针，将原本指向 B 对象的指针指向 C 对象，这时触发写屏障将 C 对象标记成灰色； 3.垃圾收集器依次遍历程序中的其他灰色对象，将它们分别标记成黑色； 存在问题 它会将有存活可能的对象都标记成灰色，因此会发现实际上不再存活的 B 对象最后没有被回收；而如果我们在第二和第三步之间将指向 C 对象的指针改回指向 B，垃圾收集器仍然认为 C 对象是存活的。这些被错误标记的垃圾对象只有在下一个循环才会被回收。 删除写屏障- 满足弱三色不变性 删除写屏障：在灰色对象删除对白色对象的引用时，将白色对象置为灰，其实就是快照保存旧的引用关系，这叫STAB（snapshot-at-the-beginning），以此满足弱三色不变性， 删除写屏障的伪代码 1234writePointer(slot, ptr) shade(*slot) *slot = ptr 每当执行类似 *slot = ptr 的表达式时，我们会执行上述写屏障通过 shade 函数尝试改变指针的颜色。此外如果 ptr 指针是白色的，那么该函数会将该对象设置成灰色，其他情况则保持不变。 标记过程 1.垃圾收集器将根对象指向 A 对象标记成黑色并将 A 对象指向的对象 B 标记成灰色； 2.用户程序将 A 对象原本指向 B 的指针指向 C，触发删除写屏障，但是因为 B 对象已经是灰色的，所以不做改变； 3.用户程序将 B 对象原本指向 C 的指针删除，触发删除写屏障，白色的 C 对象被涂成灰色； 4.垃圾收集器依次遍历程序中的其他灰色对象，将它们分别标记成黑色；注：删除写屏障通过对 C 对象的着色，保证了 C 对象和下游的 D 对象能够在这一次垃圾收集的循环中存活，避免发生悬挂指针以保证用户程序的正确性。 实现原理执行周期 Go 垃圾收集器的执行周期，可以分成清除终止、标记、标记终止和清除四个不同阶段，它们分别完成了不同的工作； 运行时虽然只会使用 GCoff、GCmark 和 _GCmarktermination 三个状态表示垃圾收集的全部阶段，但是在实现上却复杂很多， 1 清理终止阶段-STW1.暂停程序，所有的 P 在这时会进入安全点；注： GC 不是在任何位置都能进入的，只能在安全点进入。 2.如果当前垃圾收集循环是强制触发的，还需要处理还未被清理的内存管理单元 什么是安全点（safe point） 定义 mutator 所有线程中这些有机会成为暂停位置的点就叫 safepoint 即安全点。 因为 GC 时需要暂停，因此安全点也是执行 GC 的点，其他位置是不能执行 GC 的。 主要在哪些位置放置安全点？ 对于解释器来说其实每个字节码边界都可以成为一个安全点，对于 JIT 编译的代码也能在很多位置插入安全点，但是实现上只会在一些特定的位置插入安全点，例如：循环的末尾、方法临返回前、调用方法的call指令后可能抛异常的位置。 如何得知此时需要在安全点暂停呢check 安全点按解释执行和编译执行有不同的方式： 解释执行 check 在安全点轮询一个标志位，需要暂停时GC 就会设置这个标志位。 编译执行 check 在需要进入安全点时就把这个内存页设为不可访问，然后编译代码访问就会发生异常，然后捕获这个异常挂起即暂停。 如果阻塞住的线程咋办？它到不了安全点啊，总不能等着它吧？ 这里引入安全区域的概念，在引用关系不会发生变化的代码段中的区域称为安全区域。在安全区域内的任意地方开始 GC 都是安全的。注：这些执行到安全区域的线程也会标识自己进入了安全区域，此时 GC 就不用等着了，并且这些线程如果要出安全区域的时候也会查看此时是否在 GC ，如果在就阻塞等着，如果 GC 结束了那就继续执行。 思考：为啥 counted 循环做很慢的操作，可能会卡顿？因为counted loop 不是安全区，无法触发GC，进而导致计算资源不释放内存不回收造成卡顿。注：counted 循环有：像for (int i…) 这种就是 counted 循环 2 标记阶段-并发执行（并发扫描&amp;标记辅助） 将状态切换至 _GCmark 1.开启写屏障；2.选择不同的标记执行策略，扫描根对象并发标记内存中的对象；3.使用分布式的终止算法检查剩余的工作，发现标记阶段完成后进入标记终止阶段； 并发扫描 扫描栈上、全局变量等根对象并将它们加入队列，依次处理灰色队列中的对象，将对象标记成黑色并将它们指向的对象标记成灰色；注：扫描 Goroutine 栈期间会暂停当前处理器 标记进程资源分配： 一旦写屏障打开，垃圾收集器就开始标记阶段。首先是占用 25% CPU 计算资源，这意味着对于一个4线程的Go程序，一个P将专门用于垃圾收集工作。 Goroutine 的 3 种模式 用于并发扫描对象的工作协程 Goroutine 总共有三种不同的模式，分别是 gcMarkWorkerDedicatedMode — 处理器专门负责标记对象，不会被调度器抢占； gcMarkWorkerFractionalMode — 当垃圾收集的后台 CPU 使用率达不到预期时（默认为 25%），启动该类型的工作协程帮助垃圾收集达到利用率的目标，因为它只占用同一个 CPU 的部分资源，所以可以被调度； gcMarkWorkerIdleMode — 当处理器没有可以执行的 Goroutine 时，它会运行垃圾收集的标记任务直到被抢占；不同模式 Goroutine 在标记对象时使用完全不同的策略： 工作池 属于一个生产者和消费者的模型。写屏障、根对象扫描和栈扫描都会向工作池中增加额外的灰色对象等待处理，而对象的扫描过程会将灰色对象标记成黑色，同时也可能发现新的灰色对象，，同时为了减少锁竞争，它具有属于 P 的本地任务列表和全局任务列表。 用户程序辅助标记（Mutator Mark Assists） 为了保证用户程序分配内存的速度不会超出后台任务的标记速度，避免用户程序分配内存影响垃圾收集器完成标记工作的期望时间，从而保证标记任务在到达期望堆大小时完成，运行时还引入了标记辅助技术。 实现 遵循分配多少内存就需要完成多少标记任务的原则。 优化 如果任何本次垃圾回收最终需要大量的 Mutator Mark Assists 才能完成工作，则垃圾收集器会提前开始下一个垃圾收集周期。这样做可以减少下一次垃圾收集所需的 Mutator Mark Assists。 标记终止阶段 -STW暂停程序，将状态切换 _GCmarktermination 1.关闭混合写屏障 2.关闭所有协助垃圾收集的用户程序，恢复用户 Goroutine 的调度 3.基于本轮 GC 数据统计,计算下一轮 GC 目标。 清理阶段- 并发执行将状态切换至 _GCoff 后台并发清理所有的内存管理单元，当用户程序在申请内存时才会惰性回收内存(将清理导致的延迟和吞吐量降低分散到每次内存分配中）； 回收器 清理中包含对象回收器和内存单元回收器，这两种回收器使用不同的算法清理堆内存： 对象回收器在 mspan 中查找并释放未被标记的对象； 内存单元回收器会在内存中查找所有对象都未被标记的 mspan； 演进过程","link":"/2022/10/13/golang/go%20GC%E6%A8%A1%E5%9E%8B/"}],"tags":[],"categories":[],"pages":[]}